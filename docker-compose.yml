# Docker Compose for Call Centre Agent Development Environment
# Optimized for network-restricted environments with offline capabilities
version: '3.8'

services:
  # Main development environment with pre-downloaded models
  call-centre-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: call-centre-dev
    ports:
      - "8888:8888"  # JupyterLab
      - "5000:5000"  # MLflow
      - "4200:4200"  # Prefect
    volumes:
      # Mount source code for live development
      - .:/app
      # Persist data and models between container restarts
      - call_centre_data:/data
      - call_centre_models:/opt/models
      # Mount local development files
      - ./notebooks:/app/notebooks
      - ./experiments:/app/experiments
    environment:
      # Offline-first environment variables
      - TRANSFORMERS_CACHE=/opt/models/huggingface/transformers
      - HF_HOME=/opt/models/huggingface
      - SENTENCE_TRANSFORMERS_HOME=/opt/models/huggingface/sentence_transformers
      - NLTK_DATA=/opt/models/nltk
      - SPACY_DATA=/opt/models/spacy
      - PYTHONPATH=/app
      # Development environment settings
      - ENV=development
      - DEBUG=true
      - LOG_LEVEL=INFO
    networks:
      - call-centre-net
    # Restart policy for development
    restart: unless-stopped
    # Add health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/lab"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching (can run without internet)
  redis:
    image: redis:7-alpine
    container_name: call-centre-redis
    ports:
      - "6379:6379"
    volumes:
      - call_centre_redis:/data
    networks:
      - call-centre-net
    # Basic Redis configuration for development
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # PostgreSQL for advanced data storage
  postgres:
    image: postgres:15-alpine
    container_name: call-centre-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=call_centre_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - call_centre_postgres:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - call-centre-net
    restart: unless-stopped
    # Health check for PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d call_centre_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama for local LLM serving
  ollama:
    image: ollama/ollama:latest
    container_name: call-centre-ollama
    ports:
      - "11434:11434"
    volumes:
      - call_centre_ollama:/root/.ollama
    networks:
      - call-centre-net
    restart: unless-stopped
    # Pull models for offline use
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    # Note: You'll need to manually pull models after startup:
    # docker exec -it call-centre-ollama ollama pull llama2
    # docker exec -it call-centre-ollama ollama pull codellama

networks:
  call-centre-net:
    driver: bridge

volumes:
  # Persistent storage for development data
  call_centre_data:
    driver: local
  # Persistent model storage
  call_centre_models:
    driver: local
  # Redis data persistence
  call_centre_redis:
    driver: local
  # PostgreSQL data persistence
  call_centre_postgres:
    driver: local
  # Ollama model storage
  call_centre_ollama:
    driver: local